module ai.tangram.os.infra
import "pkl:json"


class Resource {
  resource: Dynamic
  secrets: Dynamic

  function resource(): Dynamic = this.resource
  function secrets(): Dynamic = this.secrets
}


class InfraResourceClaimSpec {
  configInput: Dynamic?
}

abstract class InfraResourceClaim {
  resourceName: String
  resourceType: String
  resourceVersion: String? = "v1"
  function loadResource(): Resource = (new json.Parser {}.parse(read("file:./_tangram_os_ir_\(resourceName).json")) as Dynamic).toTyped(Resource)
}

class PostgresqlDatabaseClaim extends InfraResourceClaim {
  resourceType: String = "ai.tangram.os.PostgresqlDatabase"
  function database(): PostgresqlDatabase = this.loadResource().resource().toTyped(PostgresqlDatabase)
  function secrets(): PostgresqlDatabaseSecrets = this.loadResource().secrets().toTyped(PostgresqlDatabaseSecrets)
}


class PostgresqlDatabase {
  host: String
  port: Int
  name: String
}

class PostgresqlDatabaseSecrets {
  user: String
  password: String
}

class StorageBucketClaim extends InfraResourceClaim {
  resourceType: String = "ai.tangram.os.StorageBucket"
  function bucket(): StorageBucket = this.loadResource().resource().toTyped(StorageBucket)
  function secrets(): BucketAccessPermit = this.loadResource().secrets().toTyped(BucketAccessPermit)
}


class StorageBucket {
  type: String
  name: String
  region: String?
  endpoint: String?
  port: Int?
  securedConnection: Boolean?
}

class BucketAccessPermit {
  type: String
  accessKey: String
  secretKey: String?
}
